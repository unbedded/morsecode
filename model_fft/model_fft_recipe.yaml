target_name: SignalModelFft

requirements: |
  - Write a Model module that is part of a Model/View/Controller for processing morse code audio data.
  - Let class PlotDataDict(TypedDict): target: str; color: str; Hz: float; x_origin: float; y: np.ndarray

  CONFIGURATION PARAMETERS:
    - rolling_buffer_seconds: (default 3.0 seconds)
    - fft_rate_hz: Freq of FFT sampling (default: 200).
    - freq_range_min:  Min target frequency range for FFT analysis (default: 300 Hz).
    - freq_range_max:  Max target frequency range for FFT analysis (default: 1000 Hz).

  METHODS:
    CONSTRUCTION:
      - Set logging to WARNING
      Maintain the following rolling buffers:
      - audio_data_rolling_buffer 
        - length is rolling_buffer_seconds*audio_rate_hz initialized to zeros 
      - fft_magnitude_rolling_buffer 
        - length is rolling_buffer_seconds*fft_rate_hz initialized to zeros 

    get_fft_rate_hz() -> float
      - Returns fft_rate_hz

    set_audio_rate_hz( audio_rate_hz: (int or float)) 
      1) resize and initialize rolling buffers audio_data_rolling_buffer and fft_magnitude_rolling_buffer
      2) update audio_rate_hz

    process_chunk(audio_data_chunk) -> Dict[str, PlotDataDict] :
      1) append audio_data_chunk onto audio_data_rolling_buffer. 
      2) Compute fft_magnitude of audio_data_chunk using the streaming_fft class
      3) fft_magnitude_range = fft_magnitude between freq_range_min & freq_range_max 
      4) mag_max = max(fft_magnitude_range) 
      5) append mag_max onto rolling buffer fft_magnitude_rolling_buffer 
      6) fft_magnitude_hz = 1/(frequency_bins[1]-frequency_bins[0]

      RETURN a signal_dict dictionary of PlotDataDict values:
        {
            "Audio": {"target":"plot_1", "color":"Green", "Hz":audio_rate_hz, "x":0.0, "y": audio_data_rolling_buffer}
            "Freq": {"target":"plot_2", "color":"Green", "Hz":fft_magnitude_hz,"x":freq_range_min, "y": fft_magnitude_range} 
            "Magnitude": {"target":"plot_3", "color":"Green", "Hz":fft_rate_hz,   "x":0.0, "y": fft_magnitude_rolling_buffer} 
        }


architecture: |
  - Package code into a class named [TARGET_NAME]

code_requirements: |
  - Include the following import statements
     from model_fft.fft.fft_code import Streaming_fft 
     from typing import TypedDict


test_enable: False

# test_requirements: |
#   - <list any special tests>    

code_references: |
  - model_fft/fft/fft_code.py
  
