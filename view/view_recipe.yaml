target_name: SignalView

requirements: |
  - The system shall provide a View module that can display multiple rows of plots
  - Let class PlotDataDict(TypedDict): target: str; color: str; Hz: float; x_origin: float; y: np.ndarray
  - Lock the view (disable auto-scaling after first auto fit)
    - NOTE: PlotDataItem does not have a setAutoVisible() method. Instead, setAutoVisible() 
      is a method of ViewBox, which controls the visible range of plots inside the PlotWidget.

  CONFIGURATION PARAMETERS:
    - N_PLOTS=7
    - MAX_X = 800000
    - rolling_buffer_seconds: (default 3.0 seconds)
    - padding_percent= 10

  METHODS:
    CONSTRUCTION
      - Initialize a plot display window with N_PLOTS rows of graphs named:
        plot_1,plot_2,plot_3,plot_# where # is an integer from 1 to N_PLOTS inclusive
      - Store plot objects in a dictionary called curves
      - add a Y axis grid lines
      - do not auto-scale the Y-axis
      - default color for each curve is Green

    clear_plots(signal_dict : Dict[str, PlotDataDict])
      for curve_name, data in signal_dict.items():
      target_plot = data['target']
      if target_plot in self.curves:
          plot = self.curves[target_plot]
          plot.clear()

    process_chunk(signal_dict : Dict[str, PlotDataDict] ) 
      - call clear_plots() 
      - The code should create separate curve objects for each signal
      - Multiple curves can be displayed on the same plot by specifying the same target plot
      - Each curve can have its own color specified in the signal dictionary
      - Curves persist until explicitly cleared or updated
      - The plot layout and grid remain unchanged
      - multiple items in signal_dict may 'target' the same plot.
      - iterate through the signal_dict updating plots w/ x,y values
        - the signal_dict key will be the name of the curve to be graphed
        - the signal_dict 'target' will be the name of the plot to be updated,
        - allow multiple curves to be graphed without clearing the previous curves
        - Use the x axis formula:  x = np.linspace(0, (N - 1) * (1 / Hz), N)
            - with Hz = Hz from signal_dict.
            - with N = len(y from signal_dict)


    rescale_plot()
      - Y-axis scale is fixed for plot_2, plot_3 to the range [0, MAX_X].
      - Y-axis scale is fixed for  plot_5 to the range [0,10]
      - X-axis scale is fixed for  plot_5 to the range [0,0.120]
      - Y-axis scale is fixed for plot_4 and plot_6 and plot_7 to the range [-1,+1]
        Rescale plot_1 to fit range [min_y, max_y] with padding_percent % padding.
    
    teardown()
      - Add a teardown method to clean up resources and enable a finally block to ensure the teardown method is called.

    run()
      - Add a run method to start the display application loop.

    `get_cfg()` method
        that returns `cfg_dict` updated with current class configuration parameter values.

architecture: |
  - Package code into a class named [TARGET_NAME]

code_requirements: |
  - using PyQtGraph module
  - use from pyqtgraph.Qt import QtWidgets to create self.app = QtWidgets.QApplication([])
  - Add a main function to run the application - 
    generate sine wave data and plots it using the appropriate color for each graph.
  - from typing import TypedDict

test_enable: True

test_requirements: |
  - Do not test for handling invalid parameters
  - Do not test for handling invalid data    
  - Just test for plotting valid data
  - plot scrolling sin wave for 2 seconds - same plot in each plot_1, plot_2, plot_3, plot_4
  - Make sure to teardown the QApplication instance after each test

# code_references: |
#   - <list files to reference>  

# - only rescale plot_two Y axis if a y plot_two axis value exceeds the current range
# - Define class parameters for each plots line color (default: Green)
  # - use .setData(x, y) to efficiently update existing curve instead of re-plotting


      # - COLORS 
      #     - the firand use distinctive colors from the set [Green, Red, Blue, Yellow, Magenta, Cyan]
      # - use .setData(x, y) to efficiently update existing curve instead of re-plotting
